main() {
	if [[ $# -ne 1 ]]; then
		echo "Usage: $0 <1-4>"
		exit 1
	else
		case $1 in
		1)
			awk '{print $0}' ../04/nginx_access-*.log | sort -t' ' -k9,9n
			# `-t` сортировать используя пробел как разделитель полей
			# `-k9,9n` сортировать по 9 полю, интерпритировать его как число(n - numeric)
			;;
		2)
			awk '{ips[$1]} END {for (ip in ips) print ip}' ../04/nginx_access-*.log
			# `ips[$1]` добавляет первое поле как ключ в ассоциативный массив
			# Ключи уникальны, поэтому дубликаты игнорируются
			# END выполняется после обработки всех строк в файлах
			# Перебираем все ключи из массив `ips`, через `print ip` выводим каждый уникальный ip
			;;
		3)
			awk '$9 ~ /^[45][9-0][0-9]/' ../04/nginx_access-*.log
			# `~` оператор регулярного выражения, проверяет соответствует ли значение регулярному выражению
			# Используем регулярное выражение /^[45][9-0][0-9]/
			# `^` начало строки
			# `[45]` первая цифра кода должна быть 4 или 5
			# `[9-0]` вторая цифра - любая от 0 до 9
			# `[0-9]` третья цифра - тоже любая от 0 до 9
			;;
		4)
			awk '$9 ~ /^[45][9-0][0-9]/ {ips[$1]} END {for (ip in ips) print ip}' ../04/nginx_access-*.log
			;;
		*)
			echo "Unknown parameter"
			exit 1
			;;
		esac
	fi
}

main "$@"
